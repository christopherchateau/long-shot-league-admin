{"version":3,"sources":["images/todd.png","components/Header/index.js","components/TeamForm/index.js","apiCalls/index.js","components/MainPage/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","toddImg","Component","TeamForm","state","points","handleTeamClick","team","_this","props","updateTeamScore","handleInputField","e","setState","target","value","_this2","this","_this$props","teamData","teamDropDownMenu","map","index","name","key","ref","input","menu","onChange","type","placeholder","class","onClick","getTeamData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","arguments","getPlayerData","_ref2","_callee2","playerData","_context2","MainPage","componentDidMount","loadData","componentDidUpdate","sortByName","data","method","credentials","body","JSON","stringify","headers","Content-Type","console","log","sort","b","_this$state","players","player","bonus_points","teams","concat","is_eliminated","drafted_by","components_TeamForm","App","components_Header","components_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a32ab9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/todd.401918f0.png\";","import React, { Component } from \"react\";\nimport toddImg from \"../../images/todd.png\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <h1>\n          LONG SH\n          <img className=\"todd-img\" src={toddImg} />\n          T ADMIN\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./TeamForm.css\";\n\nclass TeamForm extends Component {\n  state = {\n    points: \"\"\n  };\n\n  handleTeamClick = team => {\n    this.props.updateTeamScore(team, this.state.points);\n  };\n\n  handleInputField = e => {\n    this.setState({ points: e.target.value });\n  };\n\n  render() {\n    const { points } = this.state;\n    const { teamData, handleTeamClick } = this.props;\n    const teamDropDownMenu = teamData.map((team, index) => {\n      return (\n        <option value={team.name} key={index}>\n          {team.name}\n        </option>\n      );\n    });\n\n    return (\n      <div className=\"TeamForm\">\n        <select className=\"drop-down-menu\" ref={input => (this.menu = input)}>\n          {teamDropDownMenu}\n        </select>\n        <input\n          onChange={this.handleInputField}\n          className=\"team-input\"\n          type=\"number\"\n          value={points}\n          placeholder=\"points\"\n        />\n        <label class=\"switch\">\n          <input type=\"checkbox\" />\n          <span class=\"slider\" />\n        </label>\n        <button\n          className=\"team-btn\"\n          onClick={() => this.handleTeamClick(this.menu.value)}\n        >\n          Sumbit\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default TeamForm;\n","export const getTeamData = async () => {\n  const response = await fetch(\n    \"https://long-shot-league-be.herokuapp.com/api/v1/longshotleague/teams\"\n  );\n  const teamData = await response.json();\n  return teamData;\n};\n\nexport const getPlayerData = async () => {\n  const response = await fetch(\n    \"https://long-shot-league-be.herokuapp.com/api/v1/longshotleague/players\"\n  );\n  const playerData = await response.json();\n  return playerData;\n};\n","import React, { Component } from \"react\";\nimport TeamForm from \"../TeamForm\";\nimport { getTeamData } from \"../../apiCalls\";\nimport { getPlayerData } from \"../../apiCalls\";\nimport \"./MainPage.css\";\n\nclass MainPage extends Component {\n  state = {\n    teamData: [],\n    playerData: []\n  };\n\n  componentDidMount = () => {\n    this.loadData();\n  };\n\n  componentDidUpdate = () => {\n    this.loadData();\n  };\n\n  loadData = async () => {\n    let teamData = await getTeamData();\n    let playerData = await getPlayerData();\n\n    await this.setState({\n      teamData: this.sortByName(teamData),\n      playerData: this.sortByName(playerData)\n    });\n  };\n\n  updateTeamScore = async (name, points) => {\n    const response = await fetch(\n      `http://long-shot-league-be.herokuapp.com/api/v1/longshotleague/team`,\n      {\n        method: \"PATCH\",\n        credentials: \"same-origin\",\n        body: JSON.stringify({ name, points }),\n        headers: { \"Content-Type\": \"application/json\" }\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n  };\n\n  sortByName = input =>\n    input.sort((a, b) => {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n    });\n\n  render() {\n    const { teamData, playerData } = this.state;\n\n    const players = playerData.map(player => (\n      <div className=\"player\" key={player.name}>\n        <h3>{player.name}</h3>\n        <h5>bonus: {player.bonus_points}</h5>\n      </div>\n    ));\n\n    const teams = teamData.map(team => (\n      <div\n        className={\"team\".concat(team.is_eliminated ? \" red\" : \" green\")}\n        key={team.name}\n      >\n        <h3>\n          {team.name} - {team.points}\n        </h3>\n        <h5>{team.drafted_by}</h5>\n      </div>\n    ));\n\n    return (\n      <div className=\"MainPage\">\n        <TeamForm updateTeamScore={this.updateTeamScore} teamData={teamData} />\n        <div className=\"players-wrapper\">{players}</div>\n        <div className=\"teams-wrapper\">{teams}</div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React, { Component } from \"react\";\nimport Header from \"../Header\";\nimport MainPage from \"../MainPage\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MainPage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}